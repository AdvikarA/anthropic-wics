"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/news/route";
exports.ids = ["app/api/news/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("assert");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("net");

/***/ }),

/***/ "node:fs":
/*!**************************!*\
  !*** external "node:fs" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("node:fs");

/***/ }),

/***/ "node:stream":
/*!******************************!*\
  !*** external "node:stream" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:stream");

/***/ }),

/***/ "node:stream/web":
/*!**********************************!*\
  !*** external "node:stream/web" ***!
  \**********************************/
/***/ ((module) => {

module.exports = require("node:stream/web");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("tls");

/***/ }),

/***/ "tty":
/*!**********************!*\
  !*** external "tty" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("tty");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "worker_threads":
/*!*********************************!*\
  !*** external "worker_threads" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("worker_threads");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fnews%2Froute&page=%2Fapi%2Fnews%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fnews%2Froute.ts&appDir=%2FUsers%2Fananthkumara%2FCS%2Fanthropic-wics%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fananthkumara%2FCS%2Fanthropic-wics&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fnews%2Froute&page=%2Fapi%2Fnews%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fnews%2Froute.ts&appDir=%2FUsers%2Fananthkumara%2FCS%2Fanthropic-wics%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fananthkumara%2FCS%2Fanthropic-wics&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   headerHooks: () => (/* binding */ headerHooks),\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage),\n/* harmony export */   staticGenerationBailout: () => (/* binding */ staticGenerationBailout)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_ananthkumara_CS_anthropic_wics_src_app_api_news_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/news/route.ts */ \"(rsc)/./src/app/api/news/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/news/route\",\n        pathname: \"/api/news\",\n        filename: \"route\",\n        bundlePath: \"app/api/news/route\"\n    },\n    resolvedPagePath: \"/Users/ananthkumara/CS/anthropic-wics/src/app/api/news/route.ts\",\n    nextConfigOutput,\n    userland: _Users_ananthkumara_CS_anthropic_wics_src_app_api_news_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout } = routeModule;\nconst originalPathname = \"/api/news/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZuZXdzJTJGcm91dGUmcGFnZT0lMkZhcGklMkZuZXdzJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGbmV3cyUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRmFuYW50aGt1bWFyYSUyRkNTJTJGYW50aHJvcGljLXdpY3MlMkZzcmMlMkZhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPSUyRlVzZXJzJTJGYW5hbnRoa3VtYXJhJTJGQ1MlMkZhbnRocm9waWMtd2ljcyZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUNlO0FBQzVGO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsdUdBQXVHO0FBQy9HO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDNko7O0FBRTdKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV3cy1haS8/MTQzYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIvVXNlcnMvYW5hbnRoa3VtYXJhL0NTL2FudGhyb3BpYy13aWNzL3NyYy9hcHAvYXBpL25ld3Mvcm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL25ld3Mvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9uZXdzXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9uZXdzL3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiL1VzZXJzL2FuYW50aGt1bWFyYS9DUy9hbnRocm9waWMtd2ljcy9zcmMvYXBwL2FwaS9uZXdzL3JvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIGhlYWRlckhvb2tzLCBzdGF0aWNHZW5lcmF0aW9uQmFpbG91dCB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL25ld3Mvcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgaGVhZGVySG9va3MsIHN0YXRpY0dlbmVyYXRpb25CYWlsb3V0LCBvcmlnaW5hbFBhdGhuYW1lLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fnews%2Froute&page=%2Fapi%2Fnews%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fnews%2Froute.ts&appDir=%2FUsers%2Fananthkumara%2FCS%2Fanthropic-wics%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fananthkumara%2FCS%2Fanthropic-wics&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/news/route.ts":
/*!***********************************!*\
  !*** ./src/app/api/news/route.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/lib/axios.js\");\n/* harmony import */ var _anthropic_ai_sdk__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @anthropic-ai/sdk */ \"(rsc)/./node_modules/@anthropic-ai/sdk/index.mjs\");\n\n\n\n// Initialize APIs\nconst NEWS_API_KEY = process.env.NEWS_API_KEY || \"\";\nconst NEWS_API_BASE_URL = \"https://newsapi.org/v2\";\nif (!NEWS_API_KEY) {\n    console.error(\"NEWS_API_KEY environment variable is not set\");\n}\nconst anthropic = new _anthropic_ai_sdk__WEBPACK_IMPORTED_MODULE_1__.Anthropic({\n    apiKey: process.env.ANTHROPIC_API_KEY\n});\nasync function GET(request) {\n    // Variable to track if we need to clean up a timeout\n    let timeoutId = null;\n    const clearTimeoutFn = ()=>{\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n            timeoutId = null;\n        }\n    };\n    try {\n        // Check for a refresh query parameter to determine if we should fetch new data\n        const url = new URL(request.url);\n        const shouldRefresh = url.searchParams.get(\"refresh\") === \"true\";\n        if (!shouldRefresh) {\n            console.log(\"No refresh parameter found, returning empty news stories\");\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                newsStories: [],\n                timestamp: new Date().toISOString()\n            }, {\n                status: 200\n            });\n        }\n        console.log(\"Refresh parameter found, fetching news...\");\n        // Try to import the Supabase service to fetch news stories\n        let getNewsStories = null;\n        let saveNewsStory = null;\n        try {\n            const supabaseService = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/@supabase\"), __webpack_require__.e(\"_rsc_src_lib_supabase-service_ts\")]).then(__webpack_require__.bind(__webpack_require__, /*! @/lib/supabase-service */ \"(rsc)/./src/lib/supabase-service.ts\"));\n            getNewsStories = supabaseService.getNewsStories;\n            saveNewsStory = supabaseService.saveNewsStory;\n            // If there are stories in Supabase, return them\n            if (typeof getNewsStories === \"function\") {\n                try {\n                    const existingStories = await getNewsStories();\n                    if (existingStories && existingStories.length > 0) {\n                        console.log(`Found ${existingStories.length} existing stories in Supabase`);\n                        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                            newsStories: existingStories,\n                            timestamp: new Date().toISOString()\n                        }, {\n                            status: 200\n                        });\n                    }\n                } catch (dbError) {\n                    console.error(\"Error fetching from Supabase:\", dbError);\n                // Continue to fallback if Supabase fails\n                }\n            }\n        } catch (importError) {\n            console.error(\"Error importing Supabase service:\", importError);\n        // Continue to fallback if import fails\n        }\n        if (!shouldRefresh) {\n            console.log(\"No refresh parameter found, returning empty news stories\");\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                newsStories: [],\n                timestamp: new Date().toISOString()\n            }, {\n                status: 200\n            });\n        }\n        console.log(\"Refresh parameter found, fetching from NewsAPI...\");\n        // Set a timeout for the entire request\n        const requestTimeout = 60000; // 60 seconds\n        // Create a promise that rejects after the timeout\n        const timeoutPromise = new Promise((_, reject)=>{\n            timeoutId = setTimeout(()=>{\n                reject(new Error(\"Request timed out after 60 seconds\"));\n            }, requestTimeout);\n        });\n        console.log(\"Fetching news from NewsAPI...\");\n        console.log(\"Using NewsAPI key:\", NEWS_API_KEY ? \"Key is set\" : \"Key is NOT set\");\n        // First, collect all articles from different sources\n        let allArticles = [];\n        // Fetch news from multiple sources with emphasis on US and political sources\n        const sources = [\n            \"cnn\",\n            \"fox-news\",\n            \"the-washington-post\",\n            \"politico\",\n            \"nbc-news\",\n            \"abc-news\",\n            \"bbc-news\",\n            \"reuters\",\n            \"associated-press\",\n            \"bloomberg\",\n            \"the-wall-street-journal\"\n        ];\n        // Fetch top headlines from each source\n        for (const source of sources){\n            try {\n                console.log(`Fetching headlines from ${source}...`);\n                const sourceUrl = `${NEWS_API_BASE_URL}/top-headlines?sources=${source}&pageSize=10&apiKey=${NEWS_API_KEY}`;\n                // Configure axios with proper timeout and no signal\n                const response = await axios__WEBPACK_IMPORTED_MODULE_2__[\"default\"].get(sourceUrl, {\n                    timeout: 10000,\n                    headers: {\n                        \"Cache-Control\": \"no-cache\"\n                    }\n                });\n                const data = response.data;\n                if (data.articles && data.articles.length > 0) {\n                    console.log(`Got ${data.articles.length} articles from ${source}`);\n                    // Add source info to each article\n                    data.articles.forEach((article)=>{\n                        if (article.title && article.url) {\n                            // Extract keywords from title and description\n                            const keywords = extractKeywords(article.title + \" \" + (article.description || \"\"));\n                            // Analyze bias in the article\n                            const biasAnalysis = analyzeArticleBias(article.title, article.description || \"\", article.content || \"\");\n                            // Debug the bias analysis results\n                            console.log(`Bias analysis for ${source}:`, {\n                                title: article.title.substring(0, 30) + \"...\",\n                                bias: biasAnalysis.bias,\n                                quoteCount: biasAnalysis.biasQuotes.length,\n                                sampleQuote: biasAnalysis.biasQuotes[0]?.substring(0, 50) + \"...\"\n                            });\n                            allArticles.push({\n                                ...article,\n                                sourceId: source,\n                                keywords: keywords,\n                                bias: biasAnalysis.bias,\n                                biasQuotes: biasAnalysis.biasQuotes\n                            });\n                        }\n                    });\n                }\n            } catch (error) {\n                console.error(`Error fetching from ${source}:`, error);\n            }\n        }\n        console.log(`Collected ${allArticles.length} total articles from all sources`);\n        // If no articles were collected, return empty array instead of using fallback data\n        if (allArticles.length === 0) {\n            console.log(\"No articles collected, likely due to rate limiting.\");\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                newsStories: [],\n                timestamp: new Date().toISOString(),\n                error: \"Rate limit exceeded or no articles available\"\n            }, {\n                status: 200\n            });\n        }\n        // Group similar articles together\n        const newsEvents = [];\n        for (const article of allArticles){\n            let foundMatch = false;\n            // Check if this article belongs to an existing event\n            for (const event of newsEvents){\n                if (event.articles.some((existingArticle)=>areArticlesSimilar(existingArticle, article))) {\n                    // Check if this source is already in the event\n                    const sourceExists = event.articles.some((existingArticle)=>existingArticle.source?.name === article.source?.name);\n                    // Only add if it's from a different source\n                    if (!sourceExists) {\n                        event.articles.push(article);\n                    }\n                    foundMatch = true;\n                    break;\n                }\n            }\n            // If no match found, create a new event\n            if (!foundMatch) {\n                newsEvents.push({\n                    articles: [\n                        article\n                    ],\n                    category: determineNewsCategory(article.title, article.description, extractKeywords(article.title + \" \" + article.description))\n                });\n            }\n        }\n        // Process the events to create news stories\n        const newsStories = [];\n        // Process events with at least 3 sources (for better comparison)\n        const multiSourceEvents = newsEvents.filter((event)=>event.articles.length >= 3);\n        console.log(`Found ${multiSourceEvents.length} events with at least 3 sources`);\n        // If not enough multi-source events, include some with fewer sources\n        const eventsToProcess = multiSourceEvents.length >= 5 ? multiSourceEvents.slice(0, 10) : [\n            ...multiSourceEvents,\n            ...newsEvents.filter((event)=>event.articles.length >= 2).slice(0, 10 - multiSourceEvents.length)\n        ];\n        console.log(`Processing ${eventsToProcess.length} news events`);\n        // Process each event to create a news story\n        for (const event of eventsToProcess){\n            // Use the most detailed article as the main one\n            const mainArticle = event.articles.reduce((best, current)=>{\n                const bestLength = (best.content?.length || 0) + (best.description?.length || 0);\n                const currentLength = (current.content?.length || 0) + (current.description?.length || 0);\n                return currentLength > bestLength ? current : best;\n            }, event.articles[0]);\n            // Create sources list\n            const sources = event.articles.map((article)=>({\n                    title: article.title,\n                    source: article.source?.name || article.sourceId,\n                    link: article.url\n                }));\n            // Generate a summary and extract common facts and unique claims\n            let summary = mainArticle.description || \"\";\n            let commonFacts = \"\";\n            const uniqueClaims = [];\n            // Process source bias information\n            const sourceBiasInfo = [];\n            // Debug log to check if articles have bias information\n            console.log(\"Checking for bias in articles:\", event.articles.length, \"articles\");\n            for (const article of event.articles){\n                // Debug log for each article\n                console.log(\"Article source:\", article.source?.name || article.sourceId);\n                console.log(\"Has bias info:\", !!article.bias, \"Has bias quotes:\", !!(article.biasQuotes && article.biasQuotes.length > 0));\n                if (article.sourceId && article.bias && article.biasQuotes && article.biasQuotes.length > 0) {\n                    // Find the source name from the article\n                    const sourceName = article.source?.name || article.sourceId;\n                    // Add to source bias info if not already added\n                    if (!sourceBiasInfo.some((sb)=>sb.source === sourceName)) {\n                        sourceBiasInfo.push({\n                            source: sourceName,\n                            bias: article.bias,\n                            biasQuotes: article.biasQuotes\n                        });\n                        console.log(\"Added bias info for source:\", sourceName, \"with bias:\", article.bias, \"and quotes:\", article.biasQuotes.length);\n                    }\n                }\n            }\n            // Log the final sourceBiasInfo\n            console.log(\"Total sources with bias info:\", sourceBiasInfo.length);\n            // Add to news stories\n            const newsStory = {\n                headline: mainArticle.title,\n                summary: summary,\n                sources: sources,\n                publishedAt: mainArticle.publishedAt,\n                mainKeywords: mainArticle.keywords,\n                category: event.category,\n                commonFacts: commonFacts,\n                uniqueClaims: uniqueClaims,\n                sourceBias: sourceBiasInfo\n            };\n            newsStories.push(newsStory);\n            // Save to Supabase if the function is available\n            if (typeof saveNewsStory === \"function\") {\n                try {\n                    await saveNewsStory(newsStory);\n                    console.log(`Saved story to Supabase: ${mainArticle.title.substring(0, 30)}...`);\n                } catch (saveError) {\n                    console.error(\"Error saving to Supabase:\", saveError);\n                }\n            } else {\n                console.log(\"Skipping Supabase save - saveNewsStory function not available\");\n            }\n        }\n        // Return the news stories\n        clearTimeoutFn(); // Clear the timeout before returning\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            newsStories,\n            timestamp: new Date().toISOString()\n        }, {\n            status: 200\n        });\n    } catch (error) {\n        // Clear the timeout if there was an error\n        try {\n            // Only clear timeout if we're in the NewsAPI fetch path\n            if (typeof clearTimeoutFn === \"function\") {\n                clearTimeoutFn();\n            }\n        } catch (e) {\n        // Ignore errors in cleanup\n        }\n        console.error(\"Error in News API:\", error);\n        // Return a more detailed error message\n        const errorMessage = error instanceof Error ? error.message : \"Failed to fetch news\";\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: errorMessage,\n            timestamp: new Date().toISOString()\n        }, {\n            status: 500\n        });\n    }\n}\n// Helper functions (copied from original file)\nfunction extractKeywords(text) {\n    if (!text) return [];\n    // Remove common stop words\n    const stopWords = [\n        \"a\",\n        \"an\",\n        \"the\",\n        \"and\",\n        \"or\",\n        \"but\",\n        \"is\",\n        \"are\",\n        \"was\",\n        \"were\",\n        \"be\",\n        \"been\",\n        \"being\",\n        \"in\",\n        \"on\",\n        \"at\",\n        \"to\",\n        \"for\",\n        \"with\",\n        \"by\",\n        \"about\",\n        \"against\",\n        \"between\",\n        \"into\",\n        \"through\",\n        \"during\",\n        \"before\",\n        \"after\",\n        \"above\",\n        \"below\",\n        \"from\",\n        \"up\",\n        \"down\",\n        \"of\",\n        \"off\",\n        \"over\",\n        \"under\",\n        \"again\",\n        \"further\",\n        \"then\",\n        \"once\",\n        \"here\",\n        \"there\",\n        \"when\",\n        \"where\",\n        \"why\",\n        \"how\",\n        \"all\",\n        \"any\",\n        \"both\",\n        \"each\",\n        \"few\",\n        \"more\",\n        \"most\",\n        \"other\",\n        \"some\",\n        \"such\",\n        \"no\",\n        \"nor\",\n        \"not\",\n        \"only\",\n        \"own\",\n        \"same\",\n        \"so\",\n        \"than\",\n        \"too\",\n        \"very\",\n        \"s\",\n        \"t\",\n        \"can\",\n        \"will\",\n        \"just\",\n        \"don\",\n        \"should\",\n        \"now\"\n    ];\n    // Normalize text\n    const normalizedText = text.toLowerCase().replace(/[^\\w\\s]/g, \"\") // Remove punctuation\n    .replace(/\\s+/g, \" \"); // Normalize whitespace\n    // Split into words and filter\n    const words = normalizedText.split(\" \").filter((word)=>word.length > 3 && !stopWords.includes(word));\n    // Count word frequencies\n    const wordCounts = {};\n    for (const word of words){\n        wordCounts[word] = (wordCounts[word] || 0) + 1;\n    }\n    // Sort by frequency\n    const sortedWords = Object.keys(wordCounts).sort((a, b)=>wordCounts[b] - wordCounts[a]);\n    // Return top keywords (up to 10)\n    return sortedWords.slice(0, 10);\n}\n// Helper function to analyze article bias and extract relevant quotes\nfunction analyzeArticleBias(title, description, content) {\n    // Combine all text for analysis\n    const fullText = [\n        title,\n        description,\n        content\n    ].filter(Boolean).join(\" \");\n    // Initialize result\n    const result = {\n        bias: \"unknown\",\n        biasQuotes: []\n    };\n    // Define bias indicators - expanded for better detection\n    const leftBiasTerms = [\n        \"progressive\",\n        \"liberal\",\n        \"democrat\",\n        \"social justice\",\n        \"equality\",\n        \"climate change\",\n        \"green\",\n        \"environmental\",\n        \"diversity\",\n        \"inclusion\",\n        \"marginalized\",\n        \"systemic\",\n        \"reform\",\n        \"regulation\",\n        \"workers\",\n        \"union\",\n        \"universal healthcare\",\n        \"gun control\",\n        \"reproductive rights\",\n        \"welfare\",\n        \"public option\",\n        \"medicare for all\",\n        \"wealth tax\",\n        \"income inequality\",\n        \"living wage\",\n        \"affordable housing\",\n        \"student loan forgiveness\",\n        \"police reform\",\n        \"defund\",\n        \"progressive\",\n        \"racial justice\",\n        \"gender equality\",\n        \"LGBTQ+\",\n        \"transgender\",\n        \"pronouns\",\n        \"privilege\",\n        \"structural racism\",\n        \"equity\",\n        \"affirmative action\",\n        \"reparations\"\n    ];\n    const rightBiasTerms = [\n        \"conservative\",\n        \"republican\",\n        \"traditional\",\n        \"freedom\",\n        \"liberty\",\n        \"patriot\",\n        \"america first\",\n        \"free market\",\n        \"deregulation\",\n        \"tax cuts\",\n        \"small government\",\n        \"second amendment\",\n        \"pro-life\",\n        \"border security\",\n        \"illegal immigration\",\n        \"law and order\",\n        \"family values\",\n        \"religious liberty\",\n        \"constitutional\",\n        \"founding fathers\",\n        \"heritage\",\n        \"individual responsibility\",\n        \"school choice\",\n        \"tough on crime\",\n        \"national security\",\n        \"military strength\",\n        \"fiscal responsibility\",\n        \"private sector\",\n        \"job creators\",\n        \"limited government\",\n        \"states rights\",\n        \"voter ID\",\n        \"traditional marriage\",\n        \"sanctity of life\",\n        \"american exceptionalism\",\n        \"patriotism\"\n    ];\n    // Count bias indicators\n    let leftCount = 0;\n    let rightCount = 0;\n    // Extract sentences that might contain bias\n    const sentences = fullText.split(/[.!?]\\s+/);\n    const biasQuotes = [];\n    for (const sentence of sentences){\n        let leftTermsInSentence = 0;\n        let rightTermsInSentence = 0;\n        // Check for left-leaning terms\n        for (const term of leftBiasTerms){\n            if (sentence.toLowerCase().includes(term.toLowerCase())) {\n                leftCount++;\n                leftTermsInSentence++;\n            }\n        }\n        // Check for right-leaning terms\n        for (const term of rightBiasTerms){\n            if (sentence.toLowerCase().includes(term.toLowerCase())) {\n                rightCount++;\n                rightTermsInSentence++;\n            }\n        }\n        // If sentence contains bias terms, add it to quotes\n        if (leftTermsInSentence > 0 || rightTermsInSentence > 0) {\n            // Only add if the sentence is of reasonable length and not already included\n            if (sentence.length > 20 && sentence.length < 300 && !biasQuotes.includes(sentence)) {\n                biasQuotes.push(sentence.trim() + \".\");\n            }\n        }\n    }\n    // If we don't have enough bias quotes, add some general sentences from the article\n    if (biasQuotes.length < 2 && sentences.length > 0) {\n        // Find substantive sentences that might represent the article's perspective\n        for (const sentence of sentences){\n            if (sentence.length > 40 && sentence.length < 250 && !biasQuotes.includes(sentence)) {\n                // Look for sentences with opinion indicators or attributions\n                if (sentence.toLowerCase().includes(\"according to\") || sentence.toLowerCase().includes(\"said\") || sentence.toLowerCase().includes(\"stated\") || sentence.toLowerCase().includes(\"believes\") || sentence.toLowerCase().includes(\"argues\") || sentence.toLowerCase().includes(\"claims\") || sentence.toLowerCase().includes(\"suggests\") || sentence.toLowerCase().includes(\"indicates\")) {\n                    biasQuotes.push(sentence.trim() + \".\");\n                    if (biasQuotes.length >= 3) break;\n                }\n            }\n        }\n    }\n    // If we still don't have enough quotes, add some substantive sentences from the article\n    if (biasQuotes.length < 2 && sentences.length > 0) {\n        // Sort sentences by length (prefer longer, more substantive sentences)\n        const sortedSentences = [\n            ...sentences\n        ].filter((s)=>s.length > 30 && s.length < 250).sort((a, b)=>b.length - a.length);\n        // Take the top sentences that aren't already in biasQuotes\n        for (const sentence of sortedSentences){\n            if (!biasQuotes.includes(sentence)) {\n                biasQuotes.push(sentence.trim() + \".\");\n                if (biasQuotes.length >= 3) break;\n            }\n        }\n    }\n    // Determine overall bias based on term counts\n    if (leftCount > rightCount * 1.5) {\n        result.bias = \"left\";\n    } else if (rightCount > leftCount * 1.5) {\n        result.bias = \"right\";\n    } else if (leftCount > 0 || rightCount > 0) {\n        result.bias = \"center\";\n    } else {\n        // If no clear bias terms, default to center\n        result.bias = \"center\";\n    }\n    // Limit to top 3 quotes\n    result.biasQuotes = biasQuotes.slice(0, 3);\n    return result;\n}\n// Helper function to determine news category\nfunction determineNewsCategory(title, description, keywords) {\n    const text = (title + \" \" + description).toLowerCase();\n    const allText = text + \" \" + keywords.join(\" \").toLowerCase();\n    // Check for US news\n    if (/\\b(us|united states|america|american|washington|biden|trump|congress|senate|house|white house)\\b/.test(allText)) {\n        return \"us\";\n    }\n    // Check for politics\n    if (/\\b(politic|election|vote|democrat|republican|congress|senate|house|president|administration|government|law|supreme court|bill|legislation)\\b/.test(allText)) {\n        return \"politics\";\n    }\n    // Check for world news\n    if (/\\b(world|global|international|europe|asia|africa|middle east|china|russia|ukraine|foreign|diplomatic|un|united nations)\\b/.test(allText)) {\n        return \"world\";\n    }\n    // Check for business/economy\n    if (/\\b(business|economy|economic|market|stock|finance|trade|company|corporate|inflation|recession|fed|federal reserve)\\b/.test(allText)) {\n        return \"business\";\n    }\n    // Check for technology\n    if (/\\b(tech|technology|digital|software|hardware|app|internet|cyber|ai|artificial intelligence|robot|innovation|startup)\\b/.test(allText)) {\n        return \"technology\";\n    }\n    // Check for health\n    if (/\\b(health|medical|medicine|disease|virus|pandemic|doctor|hospital|patient|covid|vaccine|healthcare)\\b/.test(allText)) {\n        return \"health\";\n    }\n    // Check for science\n    if (/\\b(science|scientific|research|study|discovery|space|nasa|physics|biology|chemistry|climate|environment)\\b/.test(allText)) {\n        return \"science\";\n    }\n    // Check for sports\n    if (/\\b(sport|game|match|team|player|championship|tournament|olympic|football|soccer|basketball|baseball|tennis|nfl|nba|mlb)\\b/.test(allText)) {\n        return \"sports\";\n    }\n    // Check for entertainment\n    if (/\\b(entertainment|movie|film|tv|television|show|celebrity|actor|actress|music|artist|concert|hollywood)\\b/.test(allText)) {\n        return \"entertainment\";\n    }\n    // Check for social/lifestyle\n    if (/\\b(social|lifestyle|fashion|food|travel|celebrity|trend)\\b/.test(allText)) {\n        return \"social\";\n    }\n    // Default to 'other' if no category matches\n    return \"other\";\n}\n// Helper function to check if two articles are about the same story\nfunction areArticlesSimilar(article1, article2) {\n    // If titles are very similar, they're likely about the same story\n    const titleSimilarity = calculateTitleSimilarity(article1.title, article2.title);\n    if (titleSimilarity > 0.7) {\n        return true;\n    }\n    // Check for shared entities\n    const entities1 = extractNamedEntities(article1.title + \" \" + (article1.description || \"\"));\n    const entities2 = extractNamedEntities(article2.title + \" \" + (article2.description || \"\"));\n    // Count shared entities\n    let sharedEntities = 0;\n    for (const entity of entities1){\n        if (entities2.includes(entity)) {\n            sharedEntities++;\n        }\n    }\n    // If they share multiple entities, they're likely about the same story\n    if (sharedEntities >= 2) {\n        return true;\n    }\n    // Check for keyword overlap\n    const keywords1 = article1.keywords || [];\n    const keywords2 = article2.keywords || [];\n    let sharedKeywords = 0;\n    for (const keyword of keywords1){\n        if (keywords2.includes(keyword)) {\n            sharedKeywords++;\n        }\n    }\n    // If they share multiple keywords, they might be about the same story\n    if (sharedKeywords >= 3) {\n        return true;\n    }\n    return false;\n}\n// Helper function to calculate title similarity\nfunction calculateTitleSimilarity(title1, title2) {\n    // Normalize titles\n    const normalize = (text)=>{\n        return text.toLowerCase().replace(/[^\\w\\s]/g, \"\") // Remove punctuation\n        .replace(/\\s+/g, \" \") // Normalize whitespace\n        .trim();\n    };\n    const normalizedTitle1 = normalize(title1);\n    const normalizedTitle2 = normalize(title2);\n    // Split into words\n    const words1 = normalizedTitle1.split(\" \");\n    const words2 = normalizedTitle2.split(\" \");\n    // Count shared words\n    let sharedWords = 0;\n    for (const word of words1){\n        if (word.length > 3 && words2.includes(word)) {\n            sharedWords++;\n        }\n    }\n    // Calculate Jaccard similarity\n    const uniqueWords = new Set([\n        ...words1,\n        ...words2\n    ]);\n    return sharedWords / uniqueWords.size;\n}\n// Helper function to extract named entities\nfunction extractNamedEntities(text) {\n    // This is a simplified version that looks for capitalized words\n    // In a real implementation, you'd use a NLP library\n    const entities = [];\n    const words = text.split(/\\s+/);\n    // Look for capitalized words that aren't at the start of sentences\n    for(let i = 1; i < words.length; i++){\n        const word = words[i].replace(/[^\\w]/g, \"\"); // Remove punctuation\n        if (word.length > 1 && /^[A-Z]/.test(word)) {\n            // Check if it's part of a multi-word entity\n            let entity = word;\n            let j = i + 1;\n            // Continue adding capitalized words to the entity\n            while(j < words.length){\n                const nextWord = words[j].replace(/[^\\w]/g, \"\");\n                if (nextWord.length > 1 && /^[A-Z]/.test(nextWord)) {\n                    entity += \" \" + nextWord;\n                    j++;\n                } else {\n                    break;\n                }\n            }\n            entities.push(entity);\n            i = j - 1; // Skip the words we've already included\n        }\n    }\n    // Also look for words at the start of sentences that might be entities\n    if (words.length > 0) {\n        const firstWord = words[0].replace(/[^\\w]/g, \"\");\n        if (firstWord.length > 1 && /^[A-Z]/.test(firstWord) && !/^(The|A|An|This|That|These|Those|It|He|She|They|We|I)$/i.test(firstWord)) {\n            entities.push(firstWord);\n        }\n    }\n    // Return unique entities\n    return Array.from(new Set(entities));\n}\n// Function to generate fallback news articles when API is rate limited\nfunction generateFallbackArticles() {\n    const fallbackArticles = [\n        {\n            title: \"Global Climate Summit Reaches Historic Agreement\",\n            description: \"World leaders have agreed to ambitious new targets to reduce carbon emissions by 2030.\",\n            content: \"In a landmark decision, representatives from 195 countries have committed to cutting carbon emissions by 50% before the end of the decade. The agreement, which follows two weeks of intense negotiations, has been hailed as a breakthrough in the fight against climate change. Environmental activists have welcomed the news but warn that implementation will be key.\",\n            source: {\n                name: \"Reuters\"\n            },\n            sourceId: \"reuters\",\n            url: \"https://example.com/climate-summit\",\n            publishedAt: new Date().toISOString(),\n            keywords: [\n                \"climate\",\n                \"emissions\",\n                \"agreement\",\n                \"global\",\n                \"summit\",\n                \"carbon\",\n                \"environment\",\n                \"targets\"\n            ],\n            bias: \"center\",\n            biasQuotes: [\n                \"The agreement represents a balanced approach to addressing climate challenges while considering economic realities.\",\n                \"Both progressive and conservative leaders have expressed cautious optimism about the framework.\",\n                \"The summit managed to bridge divides between developing and industrialized nations.\"\n            ]\n        },\n        {\n            title: \"New Economic Policy Aims to Reduce Inflation\",\n            description: \"The Federal Reserve announced a series of measures to tackle rising consumer prices.\",\n            content: \"The Federal Reserve has unveiled a comprehensive strategy to combat inflation, which has reached its highest level in four decades. The plan includes a 0.5% interest rate hike, the largest single increase since 2000, and a reduction in the Fed's bond holdings. Economists are divided on whether these measures will be sufficient to curb inflation without triggering a recession.\",\n            source: {\n                name: \"Bloomberg\"\n            },\n            sourceId: \"bloomberg\",\n            url: \"https://example.com/fed-inflation\",\n            publishedAt: new Date().toISOString(),\n            keywords: [\n                \"economy\",\n                \"inflation\",\n                \"federal\",\n                \"reserve\",\n                \"interest\",\n                \"rates\",\n                \"policy\",\n                \"recession\"\n            ],\n            bias: \"center\",\n            biasQuotes: [\n                \"The Federal Reserve is walking a tightrope between controlling inflation and avoiding economic downturn.\",\n                \"Analysts from across the political spectrum acknowledge the difficulty of the current economic situation.\",\n                \"The policy represents a middle path between more aggressive and more cautious approaches.\"\n            ]\n        },\n        {\n            title: \"Healthcare Reform Bill Passes Senate\",\n            description: \"Landmark legislation expands coverage to millions of Americans.\",\n            content: \"After months of debate, the Senate has passed a sweeping healthcare reform bill that would extend medical coverage to an estimated 15 million currently uninsured Americans. The legislation includes provisions for lowering prescription drug prices and expanding subsidies for low-income families. The bill now moves to the House, where it faces a more challenging path to approval.\",\n            source: {\n                name: \"Washington Post\"\n            },\n            sourceId: \"the-washington-post\",\n            url: \"https://example.com/healthcare-bill\",\n            publishedAt: new Date().toISOString(),\n            keywords: [\n                \"healthcare\",\n                \"reform\",\n                \"senate\",\n                \"coverage\",\n                \"legislation\",\n                \"insurance\",\n                \"medical\",\n                \"bill\"\n            ],\n            bias: \"left\",\n            biasQuotes: [\n                \"The historic bill represents a step toward universal healthcare that many progressive advocates have long championed.\",\n                \"Supporters emphasize the moral imperative of ensuring all Americans have access to affordable healthcare.\",\n                \"The legislation addresses systemic inequalities in the current healthcare system that disproportionately affect marginalized communities.\"\n            ]\n        },\n        {\n            title: \"Tax Cut Package Proposed to Stimulate Economic Growth\",\n            description: \"Republican lawmakers unveil plan to reduce corporate and individual tax rates.\",\n            content: \"A group of Republican senators has introduced a comprehensive tax reform package that would significantly reduce rates for both corporations and individuals. Proponents argue the cuts will spur investment, create jobs, and boost economic growth. Critics contend the plan would primarily benefit wealthy Americans and increase the national deficit. The Congressional Budget Office is expected to release its analysis of the proposal next week.\",\n            source: {\n                name: \"Fox News\"\n            },\n            sourceId: \"fox-news\",\n            url: \"https://example.com/tax-cuts\",\n            publishedAt: new Date().toISOString(),\n            keywords: [\n                \"tax\",\n                \"cuts\",\n                \"economic\",\n                \"growth\",\n                \"republican\",\n                \"deficit\",\n                \"corporate\",\n                \"reform\"\n            ],\n            bias: \"right\",\n            biasQuotes: [\n                \"The tax cuts represent a commitment to free market principles and economic liberty.\",\n                \"By allowing Americans to keep more of their hard-earned money, the plan respects traditional values of self-reliance and limited government.\",\n                \"The proposal prioritizes job creation through business-friendly policies rather than government intervention.\"\n            ]\n        },\n        {\n            title: \"Supreme Court Rules on Controversial Free Speech Case\",\n            description: \"Justices deliver split decision on limits of First Amendment protections.\",\n            content: \"In a closely watched case, the Supreme Court has issued a 5-4 ruling that establishes new guidelines for determining when speech crosses the line from protected expression to illegal incitement. The decision, which crossed ideological lines, attempts to balance free speech concerns with public safety considerations. Legal experts suggest the ruling will have far-reaching implications for social media companies and online content moderation.\",\n            source: {\n                name: \"CNN\"\n            },\n            sourceId: \"cnn\",\n            url: \"https://example.com/supreme-court-speech\",\n            publishedAt: new Date().toISOString(),\n            keywords: [\n                \"supreme\",\n                \"court\",\n                \"speech\",\n                \"first\",\n                \"amendment\",\n                \"ruling\",\n                \"justices\",\n                \"constitutional\"\n            ],\n            bias: \"center\",\n            biasQuotes: [\n                \"The Court's decision reflects a nuanced understanding of competing constitutional principles.\",\n                \"Both civil liberties advocates and public safety experts found elements to praise in the ruling.\",\n                \"The majority opinion carefully weighed precedent from both liberal and conservative judicial philosophies.\"\n            ]\n        },\n        {\n            title: \"Immigration Reform Proposal Gains Bipartisan Support\",\n            description: \"Compromise bill addresses border security and path to citizenship.\",\n            content: \"A bipartisan group of senators has unveiled a comprehensive immigration reform package that includes enhanced border security measures alongside a pathway to citizenship for certain undocumented immigrants. The proposal has garnered initial support from moderate members of both parties, though it faces opposition from progressive Democrats who argue it is too restrictive and conservative Republicans who contend it amounts to amnesty.\",\n            source: {\n                name: \"ABC News\"\n            },\n            sourceId: \"abc-news\",\n            url: \"https://example.com/immigration-reform\",\n            publishedAt: new Date().toISOString(),\n            keywords: [\n                \"immigration\",\n                \"reform\",\n                \"bipartisan\",\n                \"border\",\n                \"security\",\n                \"citizenship\",\n                \"undocumented\",\n                \"compromise\"\n            ],\n            bias: \"center\",\n            biasQuotes: [\n                \"The bill represents a pragmatic middle ground between competing visions of immigration policy.\",\n                \"Negotiators from both parties made significant concessions to reach this compromise.\",\n                \"The proposal acknowledges both humanitarian concerns and the need for orderly legal immigration processes.\"\n            ]\n        }\n    ];\n    // Add some variation to the articles\n    return fallbackArticles.map((article)=>{\n        // Add random publishedAt times within the last week\n        const randomDaysAgo = Math.floor(Math.random() * 7);\n        const randomHours = Math.floor(Math.random() * 24);\n        const date = new Date();\n        date.setDate(date.getDate() - randomDaysAgo);\n        date.setHours(date.getHours() - randomHours);\n        return {\n            ...article,\n            publishedAt: date.toISOString()\n        };\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/news/route.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/formdata-node","vendor-chunks/axios","vendor-chunks/@anthropic-ai","vendor-chunks/form-data-encoder","vendor-chunks/asynckit","vendor-chunks/node-fetch","vendor-chunks/math-intrinsics","vendor-chunks/es-errors","vendor-chunks/call-bind-apply-helpers","vendor-chunks/debug","vendor-chunks/agentkeepalive","vendor-chunks/get-proto","vendor-chunks/mime-db","vendor-chunks/has-symbols","vendor-chunks/gopd","vendor-chunks/function-bind","vendor-chunks/form-data","vendor-chunks/follow-redirects","vendor-chunks/web-streams-polyfill","vendor-chunks/supports-color","vendor-chunks/proxy-from-env","vendor-chunks/ms","vendor-chunks/mime-types","vendor-chunks/humanize-ms","vendor-chunks/hasown","vendor-chunks/has-tostringtag","vendor-chunks/has-flag","vendor-chunks/get-intrinsic","vendor-chunks/event-target-shim","vendor-chunks/es-set-tostringtag","vendor-chunks/es-object-atoms","vendor-chunks/es-define-property","vendor-chunks/dunder-proto","vendor-chunks/delayed-stream","vendor-chunks/combined-stream","vendor-chunks/abort-controller"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fnews%2Froute&page=%2Fapi%2Fnews%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fnews%2Froute.ts&appDir=%2FUsers%2Fananthkumara%2FCS%2Fanthropic-wics%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fananthkumara%2FCS%2Fanthropic-wics&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();